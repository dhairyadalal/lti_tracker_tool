ungroup()
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
print(date1)
print(date2)
print(difftime( date2, date1, units = "days"))
if(difftime( date2, date1, units = "days") < 0)  return(-1)
#else return( length(seq(date1, date2, by = 'month')) )
return(0)
}
elapsed_months <- Vectorize(elapsed_months)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
print(date1)
print(date2)
print(difftime( date2, date1, units = "days") )
print(difftime( date2, date1, units = "days") < 0)
if(difftime( date2, date1, units = "days") < 0)  return(-1)
#else return( length(seq(date1, date2, by = 'month')) )
return(0)
}
elapsed_months <- Vectorize(elapsed_months)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
print(date1)
print(date2)
print(difftime( date2, date1, units = "days") )
print(difftime( date2, date1, units = "days") < 0)
if(difftime( date2, date1, units = "days") < 0)  return(-1)
else return( length(seq(date1, date2, by = 'month')) )
}
elapsed_months <- Vectorize(elapsed_months)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
print(date1)
print(date2)
print(difftime( date2, date1, units = "days") )
print(difftime( date2, date1, units = "days") < 0)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1, 1  )
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
print(date1)
print(date2)
print(difftime( date2, date1, units = "days") )
print(difftime( date2, date1, units = "days") < 0)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1, 1  )
print(return_val)
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
print(date1)
print(date2)
print(difftime( date2, date1, units = "days") )
print(difftime( date2, date1, units = "days") < 0)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1,
seq( date1, date2, by = "month") )
print(return_val)
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
seq( date1, date2, by = "month")
date1
date2
class(date1)
class(date2)
seq( date1, date2, by = 'month')
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1,
length(seq( date1, date2, by = 'month')) )
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
print(date1)
print(date2)
print(difftime( date2, date1, units = "days") )
print(difftime( date2, date1, units = "days") < 0)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1,
length(seq( date1, date2, by = 'month')) )
print(return_val)
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
print(date1)
print(date2)
print(difftime( date2, date1, units = "days") )
print(difftime( date2, date1, units = "days") < 0)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1,
length(seq( date1, date2, by = 'month')) )
print(return_val)
print(class(return_val))
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
print(date1)
print(date2)
print(difftime( date2, date1, units = "days") )
print(difftime( date2, date1, units = "days") < 0)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1,
length(seq( date1, date2, by = 'month')) )
print(return_val)
class(return_val) = "integer"
print(return_val)
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
View(grant_temp)
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1,
length(seq( date1, date2, by = 'month')) )
class(return_val) = "integer" # corece return type to integer to satisfy Vectorize constraints
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
empl_tbl       <- read.csv("data/empl_tbl.csv", stringsAsFactors = FALSE)
grant_tbl      <- read.csv("data/grant_tbl.csv", stringsAsFactors = FALSE)
grant_paid_tbl <- read.csv("data/grants_paid_tbl.csv", stringsAsFactors = FALSE )
bod_match_tbl  <- read.csv("data/perc_match_tbl.csv", stringsAsFactors = FALSE)
upcoming_tbl   <- read.csv("data/upcoming_grants.csv", stringsAsFactors = FALSE)
# 1. Generate active employee list
empl_list <- (empl_tbl %>% filter(Active == "Yes") %>% select(full_name))$full_name %>% sort
all_empl_list <- (empl_tbl %>% select(full_name))$full_name %>% sort
curr_year <- year(Sys.Date())
# Generate paid and upcoming payment tables
# 1. For each grant, expand out duration in year and start and end for each year
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
# 2. Create paid grants table
paid_calc <- grant_temp %>% filter(elm >= 0)  # a. identify years where payment periods have passed
paid_calc <- paid_calc %>%
mutate( start_month = elapsed_months(issue_date, payment_start),
end_month   = elapsed_months(issue_date, payment_end)) %>%
group_by(grant_id, empl_id, issue_date, payment_start, payment_end, amount, vesting_schedule, year ) %>%
do( data.frame( vest_month = seq(.$start_month, .$end_month, by = 1)) ) %>%
filter(vest_month <= 48) %>%
left_join(vesting_cal, by = c("vest_month" = "months")) %>%
mutate(pr_amount = amount * multiplier) %>%
group_by(grant_id, empl_id, issue_date, amount, payment_start, payment_end, vesting_schedule, year) %>%
summarise(full_vested_amount = sum(pr_amount),
captured_months = paste0(min(vest_month), "-",max(vest_month))) %>%
left_join(bod_match_tbl, match = c("year" = "year")) %>%
mutate(gm = .50, adj_perc = gm + comp_perc) %>%
ungroup()
paid_calc <- paid_calc %>%
mutate(paid_amount = adj_perc * full_vested_amount) %>%
select(grant_id, empl_id, issue_date, grant_amount = amount,
payment_start, payment_end,captured_months,vesting_schedule, bod_perc = comp_perc,
unadjusted_amount = full_vested_amount, paid_amount)
write.csv(paid_calc, "data/grants_paid_tbl.csv", row.names = FALSE)
upcoming_calc <-grant_temp %>% filter(elm < 0)
upcoming_calc <- upcoming_calc %>%
mutate( start_month  = elapsed_months(issue_date, payment_start),
end_month   = elapsed_months(issue_date, payment_end)) %>%
group_by(grant_id, empl_id, issue_date, payment_start, payment_end, amount, vesting_schedule, year ) %>%
do( data.frame( vest_month = seq(.$start_month, .$end_month, by = 1)) ) %>%
filter(vest_month <= 48) %>%
left_join(vesting_cal, by = c("vest_month" = "months")) %>%
mutate(pr_amount = amount * multiplier) %>%
group_by(grant_id, empl_id, issue_date, amount, payment_start, payment_end, vesting_schedule, year) %>%
summarise(potential_payment = sum(pr_amount),
captured_months = paste0(min(vest_month), "-",max(vest_month)))
upcoming_calc <- upcoming_calc %>%
select(grant_id, empl_id, issue_date, grant_amount = amount,
payment_start, payment_end,captured_months,vesting_schedule,
potential_payment)
write.csv(upcoming_calc, "data/upcoming_grants.csv", row.names = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cy = 2016
cy = as.numeric(cy)
tbl <- grant_tbl %>% left_join(empl_tbl %>% select(empl_id, full_name, Active), by = c("empl_id" = "empl_id"))
year_start = mdy(paste0("01/31",cy))
year_end   = mdy(paste0("12/31",cy))
spend <- tbl %>% filter(exp_year >= cy, issue_year <= cy ) %>%
mutate(start_month = elapsed_months(issue_date, year_start),
end_month   = elapsed_months(issue_date, year_end) )
View(spend)
runApp()
2:13 %>% length
cy = as.numeric(cy)
tbl <- grant_tbl %>% left_join(empl_tbl %>% select(empl_id, full_name, Active), by = c("empl_id" = "empl_id"))
year_start = mdy(paste0("01/31",cy))
year_end   = mdy(paste0("12/31",cy))
cy
tbl
year_start
year_end
year_start = mdy(paste0("01/01",cy))
tbl
spend <- tbl %>% filter(exp_year >= cy, issue_year <= cy ) %>%
mutate(start_month = elapsed_months(issue_date, year_start),
end_month   = elapsed_months(issue_date, year_end) )
spend
cy = 2017
tbl <- grant_tbl %>% left_join(empl_tbl %>% select(empl_id, full_name, Active), by = c("empl_id" = "empl_id"))
year_start = mdy(paste0("01/01",cy))
year_end   = mdy(paste0("12/31",cy))
spend <- tbl %>% filter(exp_year >= cy, issue_year <= cy ) %>%
mutate(start_month = elapsed_months(issue_date, year_start),
end_month   = elapsed_months(issue_date, year_end) )
spend
spend <- tbl %>% filter(exp_year >= cy, issue_year <= cy ) %>%
mutate(start_month = elapsed_months(issue_date, year_start),
end_month   = elapsed_months(issue_date, year_end) ) %>%
mutate(start_month = ifelse(start_month == -1, 1, start_month))
spend
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Create a vesting cal based on passed schedule
# Schedule should follow format '.%-.%-.%-.%' (e.g. '.21-.25-.25-.29')
create_vest_cal <- function(schedule){
sch = strsplit(schedule, "-")[[1]]
sch = sapply(X = sch, FUN = as.numeric)
vc = data.frame(months = 0:48,
vest_perc = c(0,
rep( sch[[1]], 12),
rep( sch[[2]], 12),
rep( sch[[3]], 12),
rep( sch[[4]], 12)),
multiplier = c(0,
rep( sch[[1]] / 12, 12),
rep( sch[[2]] / 12, 12),
rep( sch[[3]] / 12, 12),
rep( sch[[4]] / 12, 12))
)
return(vc)
}
vesting_cal = create_vest_cal(".21-.25-.25-.29")
current_year = as.integer(format(Sys.Date(), "%Y"))
# Calculate # of months between two dates.
# If date2 < date 1, return -1
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1,
length(seq( date1, date2, by = 'month')) )
class(return_val) = "integer" # corece return type to integer to satisfy Vectorize constraints
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
# Create a vesting cal based on passed schedule
# Schedule should follow format '.%-.%-.%-.%' (e.g. '.21-.25-.25-.29')
create_vest_cal <- function(schedule){
sch = strsplit(schedule, "-")[[1]]
sch = sapply(X = sch, FUN = as.numeric)
vc = data.frame(months = 0:48,
vest_perc = c(0,
rep( sch[[1]], 12),
rep( sch[[2]], 12),
rep( sch[[3]], 12),
rep( sch[[4]], 12)),
multiplier = c(0,
rep( sch[[1]] / 12, 12),
rep( sch[[2]] / 12, 12),
rep( sch[[3]] / 12, 12),
rep( sch[[4]] / 12, 12))
)
return(vc)
}
vesting_cal = create_vest_cal(".21-.25-.25-.29")
current_year = as.integer(format(Sys.Date(), "%Y"))
# Calculate # of months between two dates.
# If date2 < date 1, return -1
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1,
length(seq( date1, date2, by = 'month')) )
class(return_val) = "integer" # corece return type to integer to satisfy Vectorize constraints
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
source("controllers/tbl_create_functions.R")
empl_tbl       <- read.csv("data/empl_tbl.csv", stringsAsFactors = FALSE)
grant_tbl      <- read.csv("data/grant_tbl.csv", stringsAsFactors = FALSE)
grant_paid_tbl <- read.csv("data/grants_paid_tbl.csv", stringsAsFactors = FALSE )
bod_match_tbl  <- read.csv("data/perc_match_tbl.csv", stringsAsFactors = FALSE)
upcoming_tbl   <- read.csv("data/upcoming_grants.csv", stringsAsFactors = FALSE)
View(grant_tbl)
View(empl_tbl)
empl_list <- (empl_tbl %>% filter(Active == "Yes") %>% select(full_name))$full_name %>% sort
all_empl_list <- (empl_tbl %>% select(full_name))$full_name %>% sort
curr_year <- year(Sys.Date())
create_paid_tbl()
grant_tbl <- read.csv("data/grant_tbl.csv")
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
View(grant_temp)
grant_tbl <- read.csv("data/grant_tbl.csv")
View(empl_tbl)
View(grant_temp)
View(grant_tbl)
View(grant_temp)
grant_tbl <- read.csv("data/grant_tbl.csv")
grant_tbl <- read.csv("data/grant_tbl.csv")
View(grant_tbl)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
# Create a vesting cal based on passed schedule
# Schedule should follow format '.%-.%-.%-.%' (e.g. '.21-.25-.25-.29')
create_vest_cal <- function(schedule){
sch = strsplit(schedule, "-")[[1]]
sch = sapply(X = sch, FUN = as.numeric)
vc = data.frame(months = 0:48,
vest_perc = c(0,
rep( sch[[1]], 12),
rep( sch[[2]], 12),
rep( sch[[3]], 12),
rep( sch[[4]], 12)),
multiplier = c(0,
rep( sch[[1]] / 12, 12),
rep( sch[[2]] / 12, 12),
rep( sch[[3]] / 12, 12),
rep( sch[[4]] / 12, 12))
)
return(vc)
}
vesting_cal = create_vest_cal(".21-.25-.25-.29")
current_year = as.integer(format(Sys.Date(), "%Y"))
# Calculate # of months between two dates.
# If date2 < date 1, return -1
elapsed_months <- function( date1, date2 ){
date1 = as.Date(date1)
date2 = as.Date(date2)
return_val = ifelse( difftime( date2, date1, units = "days") < 0, -1,
length(seq( date1, date2, by = 'month')) )
class(return_val) = "integer" # corece return type to integer to satisfy Vectorize constraints
return(return_val)
}
elapsed_months <- Vectorize(elapsed_months)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
View(grant_temp)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1)))
View(grant_temp)
View(grant_temp)
grant_tbl$issue_date %>% class
grant_tbl <- read.csv("data/grant_tbl.csv", stringsAsFactors = FALSE)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
View(grant_temp)
runApp()
runApp()
View(upcoming_tbl)
runApp()
runApp()
runApp()
grant_tbl <- read.csv("data/grant_tbl.csv", stringsAsFactors = FALSE)
View(grant_tbl)
print(grant_tbl)
grant_temp <- grant_tbl %>%
group_by(grant_id, empl_id, issue_date, issue_year, expiration_date, amount, vesting_schedule) %>%
do(data.frame(year = seq(.$issue_year, .$exp_year, by = 1))) %>%                       # a.  expand out years for duration of LTI
mutate( payment_start = ifelse( issue_year == year, issue_date, paste0(year,"-01-01") ), # b. calculate start and end periods
payment_end = paste0(year, "-12-31") )  %>%
mutate( elm = elapsed_months(payment_end, Sys.Date()) ) %>% # c. identify which years have been paid out
ungroup()
View(grant_temp)
paid_calc <- grant_temp %>% filter(elm >= 0)  # a. identify years where payment periods have passed
paid_calc <- paid_calc %>%
mutate( start_month = elapsed_months(issue_date, payment_start),
end_month   = elapsed_months(issue_date, payment_end)) %>%
group_by(grant_id, empl_id, issue_date, payment_start, payment_end, amount, vesting_schedule, year ) %>%
do( data.frame( vest_month = seq(.$start_month, .$end_month, by = 1)) ) %>%
filter(vest_month <= 48) %>%
left_join(vesting_cal, by = c("vest_month" = "months")) %>%
mutate(pr_amount = amount * multiplier) %>%
group_by(grant_id, empl_id, issue_date, amount, payment_start, payment_end, vesting_schedule, year) %>%
summarise(full_vested_amount = sum(pr_amount),
captured_months = paste0(min(vest_month), "-",max(vest_month))) %>%
left_join(bod_match_tbl, match = c("year" = "year")) %>%
mutate(gm = .50, adj_perc = gm + comp_perc) %>%
ungroup()
paid_calc <- paid_calc %>%
mutate(paid_amount = adj_perc * full_vested_amount) %>%
select(grant_id, empl_id, issue_date, grant_amount = amount,
payment_start, payment_end,captured_months,vesting_schedule, bod_perc = comp_perc,
unadjusted_amount = full_vested_amount, paid_amount)
grant_paid_tbl <<- paid_calc
write.csv(paid_calc, "data/grants_paid_tbl.csv", row.names = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
